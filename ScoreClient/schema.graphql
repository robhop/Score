schema {
  query: Query
  mutation: Mutation
  subscription: SubscriptionType
}

type Author {
  name: String!
}

type Book {
  title: String!
  author: Author!
}

type Mutation {
  addBook(book: BookInput!): Book! @cost(weight: "10")
}

type Query {
  book: Book! @cost(weight: "10")
}

type SubscriptionType {
  bookAdded: Book @cost(weight: "10")
}

input AuthorInput {
  name: String!
}

input BookInput {
  title: String!
  author: AuthorInput!
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION